CREATE DATABASE WAREWISE;

USE WAREWISE;

CREATE TABLE BUSINESS (
    BUSINESS_ID INT AUTO_INCREMENT PRIMARY KEY,
    USERNAME VARCHAR(255) UNIQUE NOT NULL,
    PASSWORD VARCHAR(255) NOT NULL,
    BUSINESS_NAME VARCHAR(255) NOT NULL,
    ADDRESS VARCHAR(255) NOT NULL,
    CREATION_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE EMPLOYEES (
    EMPLOYEE_ID INT AUTO_INCREMENT,
    BUSINESS_ID INT,
    FIRST_NAME VARCHAR(255),
    LAST_NAME VARCHAR(255),
    EMAIL VARCHAR(255),
    PHONE VARCHAR(20),
    ADDRESS VARCHAR(255),
    SALARY DECIMAL(10, 2),
    PRIMARY KEY (EMPLOYEE_ID),
    FOREIGN KEY (BUSINESS_ID) REFERENCES BUSINESS(BUSINESS_ID) ON DELETE CASCADE
);

CREATE TABLE PRODUCTS (
    PRODUCT_ID INT AUTO_INCREMENT,
    BUSINESS_ID INT,
    CATEGORY_NAME VARCHAR(255),
    PRODUCT_NAME VARCHAR(255),
    PRODUCT_DESCRIPTION TEXT,
    QUANTITY INT,
    REORDER_LEVEL INT,
    REORDER_QUANTITY INT,
    PRICE DECIMAL(10, 2),
    PRIMARY KEY (PRODUCT_ID),
    FOREIGN KEY (BUSINESS_ID) REFERENCES BUSINESS(BUSINESS_ID) ON DELETE CASCADE
);

CREATE TABLE SUPPLIERS (
    SUPPLIER_ID INT AUTO_INCREMENT,
    BUSINESS_ID INT,
    SUPPLIER_NAME VARCHAR(255),
    EMAIL VARCHAR(255),
    PHONE VARCHAR(20),
    ADDRESS VARCHAR(255),
    SUPPLIER_CATEGORY TEXT,
    PRIMARY KEY (SUPPLIER_ID),
    FOREIGN KEY (BUSINESS_ID) REFERENCES BUSINESS(BUSINESS_ID) ON DELETE CASCADE
);

CREATE TABLE BUSINESS_PRODUCT_SUPPLIER (
    BUSINESS_ID INT,
    PRODUCT_ID INT,
    SUPPLIER_ID INT,
    PRIMARY KEY (BUSINESS_ID, PRODUCT_ID, SUPPLIER_ID),
    FOREIGN KEY (BUSINESS_ID) REFERENCES BUSINESS(BUSINESS_ID) ON DELETE CASCADE,
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID) ON DELETE CASCADE,
    FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIERS(SUPPLIER_ID) ON DELETE CASCADE
);

CREATE TABLE CUSTOMERS (
    CUSTOMER_ID INT AUTO_INCREMENT,
    BUSINESS_ID INT,
    FIRST_NAME VARCHAR(255),
    LAST_NAME VARCHAR(255),
    EMAIL VARCHAR(255),
    PHONE VARCHAR(20),
    ADDRESS VARCHAR(255),
    PRIMARY KEY (CUSTOMER_ID),
    FOREIGN KEY (BUSINESS_ID) REFERENCES BUSINESS(BUSINESS_ID) ON DELETE CASCADE
);

CREATE TABLE SALES (
    SALES_ID INT AUTO_INCREMENT,
    BUSINESS_ID INT,
    PRODUCT_ID INT,
    QUANTITY INT,
    PAYMENT_DETAILS TEXT,
    PRICE DECIMAL(10, 2),
    ORDER_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (SALES_ID),
    FOREIGN KEY (BUSINESS_ID) REFERENCES BUSINESS(BUSINESS_ID) ON DELETE CASCADE,
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID) ON DELETE CASCADE
);

CREATE TABLE ORDERS (
    ORDER_LINE_ID INT AUTO_INCREMENT,
    ORDER_ID INT,
    BUSINESS_ID INT,
    PRODUCT_NAME VARCHAR(255),
    QUANTITY INT,
    PRICE DECIMAL(10, 2),
    ORDER_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (ORDER_LINE_ID),
    FOREIGN KEY (BUSINESS_ID) REFERENCES BUSINESS(BUSINESS_ID) ON DELETE CASCADE,
    INDEX (ORDER_ID)
);

CREATE TABLE BUSINESS_ORDERS_SUPPLIERS (
    BUSINESS_ID INT,
    ORDER_ID INT,
    SUPPLIER_ID INT,
    PRIMARY KEY (BUSINESS_ID, ORDER_ID, SUPPLIER_ID),
    FOREIGN KEY (BUSINESS_ID) REFERENCES BUSINESS(BUSINESS_ID) ON DELETE CASCADE,
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID) ON DELETE CASCADE,
    FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIERS(SUPPLIER_ID) ON DELETE CASCADE
);

CREATE TABLE BALANCE (
    BALANCE_ID INT AUTO_INCREMENT,
    BUSINESS_ID INT,
    BALANCE INT NOT NULL,
    TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (BALANCE_ID),
    FOREIGN KEY (BUSINESS_ID) REFERENCES BUSINESS(BUSINESS_ID) ON DELETE CASCADE
);

CREATE INDEX IDX_BUSINESS_ID_ON_EMPLOYEES ON EMPLOYEES (BUSINESS_ID);
CREATE INDEX IDX_BUSINESS_ID_ON_PRODUCTS ON PRODUCTS (BUSINESS_ID);
CREATE INDEX IDX_BUSINESS_ID_ON_SUPPLIERS ON SUPPLIERS (BUSINESS_ID);
CREATE INDEX IDX_BUSINESS_ID_ON_CUSTOMERS ON CUSTOMERS (BUSINESS_ID);
CREATE INDEX IDX_BUSINESS_ID_ON_SALES ON SALES (BUSINESS_ID);
CREATE INDEX IDX_PRODUCT_ID_ON_SALES ON SALES (PRODUCT_ID);
CREATE INDEX IDX_BUSINESS_ID_ON_ORDERS ON ORDERS (BUSINESS_ID);
CREATE INDEX IDX_BALANCE_ON_BUSINESS ON BALANCE (BUSINESS_ID);
CREATE INDEX IDX_EMAIL_ON_SUPPLIERS ON SUPPLIERS (EMAIL);
CREATE INDEX IDX_EMAIL_ON_CUSTOMERS ON CUSTOMERS (EMAIL);
CREATE INDEX IDX_ORDER_DATE_ON_SALES ON SALES (ORDER_DATE);
CREATE INDEX IDX_ORDER_DATE_ON_ORDERS ON ORDERS (ORDER_DATE);

DELIMITER //
CREATE TRIGGER UPDATE_SALE_PRICE
BEFORE INSERT ON SALES
FOR EACH ROW
BEGIN
    DECLARE UNIT_PRICE DECIMAL(10, 2);

    SELECT PRICE INTO UNIT_PRICE
    FROM PRODUCTS
    WHERE BUSINESS_ID = NEW.BUSINESS_ID AND PRODUCT_ID = NEW.PRODUCT_ID;

    SET NEW.PRICE = UNIT_PRICE * NEW.QUANTITY;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER AFTERINSERTSALE
AFTER INSERT ON SALES
FOR EACH ROW
BEGIN
    UPDATE PRODUCTS
    SET QUANTITY = QUANTITY - NEW.QUANTITY
    WHERE PRODUCT_ID = NEW.PRODUCT_ID AND BUSINESS_ID = NEW.BUSINESS_ID;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER AFTERINSERTSALEUPDATEBALANCE
AFTER INSERT ON SALES
FOR EACH ROW
BEGIN
    -- CHECK IF A BALANCE ENTRY EXISTS FOR THE BUSINESS
    IF NOT EXISTS (SELECT 1 FROM BALANCE WHERE BUSINESS_ID = NEW.BUSINESS_ID) THEN
        -- CREATE A NEW BALANCE ENTRY IF IT DOES NOT EXIST
        INSERT INTO BALANCE (BUSINESS_ID, BALANCE)
        VALUES (NEW.BUSINESS_ID, 0);
    END IF;

    -- UPDATE THE BALANCE WITH THE PRICE FROM THE NEWLY INSERTED SALE
    UPDATE BALANCE
    SET BALANCE = BALANCE + (NEW.PRICE)
    WHERE BUSINESS_ID = NEW.BUSINESS_ID;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER UPDATE_ORDER_PRICE
BEFORE INSERT ON ORDERS
FOR EACH ROW
BEGIN
    DECLARE UNIT_PRICE DECIMAL(10, 2);
    DECLARE FOUND_PRODUCT_ID INT;

    -- Find the PRODUCT_ID using PRODUCT_NAME and BUSINESS_ID
    SELECT PRODUCT_ID INTO FOUND_PRODUCT_ID
    FROM PRODUCTS
    WHERE BUSINESS_ID = NEW.BUSINESS_ID AND PRODUCT_NAME = NEW.PRODUCT_NAME;

    -- Retrieve the price using the found PRODUCT_ID
    SELECT PRICE INTO UNIT_PRICE
    FROM PRODUCTS
    WHERE PRODUCT_ID = FOUND_PRODUCT_ID;

    -- Calculate the total price based on the quantity
    SET NEW.PRICE = UNIT_PRICE * NEW.QUANTITY;
END;
//
DELIMITER ;